Stat对象
     * //zxid zookeeper状态每改变一次 都对应着一个递增的Transaction id 该id称为zxid
		//由于zxid的递增性质, 如果zxid1小于zxid2, 那么zxid1肯定先于zxid2发生. 创建任意节点, 或者更新任意节点的数据, 或者删除任意节点, 都会导致Zookeeper状态发生改变, 从而导致zxid的值增加.
  		czxid;//即 Created ZXID 节点创建时的事务ID
  	 	mzxid;//即Modified ZXID 节点最近一次更新时的事务ID
  		ctime;//Created Time 节点创建时的时间
  		mtime;//Modified Time 节点最近一次更新时的时间
  		version;//数据节点的版本号
  		cversion;//子节点的版本号
  		aversion;//节点的ACL版本号
  		ephemeralOwner;//创建该临时节点的会话的sessionID 如果该节点是持久节点 则这个属性值为0
  		dataLength;//数据内容的长度
  		numChildren;//当前节点的子节点个数
  		pzxid;//表示该节点的子节点列表最后一次被修改时的事务ID(只有子节点变更了才会变更pzxid 子节点内容变更不会影响pzxid)
  		
请求头：

class RequestHeader{

int xid 客户端请求发起的先后序号 用来保证单个客户端请求的响应顺序
int type 请求的操作类型 (OpCode.create OpCode.delete OpCode.getData等)

}
  		
请求体：

会话创建
class ConnectionRequest {

int protocolVersion 协议版本号
long lastZxidSeen 最后一次接收到服务器ZXID
int timeout 会话超时时间
long sessionId 会话标识
buffer passwd 会话密码
}

获取节点数据
class GetDataRequest{

String path 数据节点的节点路径
boolean watch 是否注册了Watcher的标识
}

更新节点数据

class SetDataRequest{

String path 数据节点的路径
buffer data 数据内容
int version  节点数据的期望版本号
}




响应头：
class ReplyHeader{

int xid 将请求头中xid原值返回
long zxid ZooKeeper服务器上当前最新的事务ID
int err 表示一个错误码 当请求处理过程中出现异常情况时,会在这个错误码中标识出来,常见的包括处理成功(Code.OK:0)、节点不存在(Code.NONODE:101)和没有权限(Code.NOAUTH:102)等,
         所有错误码 见KeeperException.Code
}

响应体：

会话创建：
class ConnectionResponse{

int protoVersion 协议版本号
int timeout 会话的超时时间
long sessionId 会话标识
buffer passwd 会话密码
}

获取节点数据

class GetDataResponse{

buffer data 数据节点的数据内容data
Stat stat 节点状态stat

}

更新节点数据
class SetDataResponse{
Stat stat 最新的节点状态
}





































